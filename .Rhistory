filter(dep_delay >= 0) %>%
arrange(dep_delay)
)
# Get some feedback on your answer above
test_that("It seems your most_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(most_delayed)), "c2431a8b3399c7757a777b93cb2a24ac")
})
test_that("Solution your least_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(least_delayed)), "d1d819e9107009c814f5218caa34cdc3")
})
print("Success")
#TODO
# replace NULL with your code
#Save in the following variable the flights that travelled the longest (in terms of air time)
(longest_duration <- flights %>%
arrange(desc(air_time))
)
#Save in the following variable the flights that travelled the shortest (in terms of air time)
(shortest_duration <- flights %>%
arrange(air_time)
)
(flights %>% select(dep_time,
dep_delay,
arr_time,
arr_delay)
)
(flights_df <- flights %>% mutate(avg_speed = (distance * 1.6093)/(air_time/60)))
# Get some feedback on your answer above
test_that("Double check your solution, it might be incorrect.", {
expect_equal(digest(as.data.frame(flights_df)), "57559957e8985836e85af32f54bf5bcc")
})
print("Success")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
library(magrittr)
library(digest)
library(testthat)
(flights_uad <- flights %>%
filter(carrier %in% c('UA','AA','DL'))
)
is.tibble(flights_uad)
# Get some feedback on your answer above
test_that("You should only have 3 unique values in the carrier column", {
expect_equal(length(unique(flights_uad$carrier)), 3)
})
test_that("Solution is incorrect", {
expect_equal(digest((sum(flights_uad$year))), "986b5dcdb3414c74ee6cd0f851d1e9f1")
})
print("success!")
(delayed_on_route <- flights %>%
filter(arr_delay > 120) %>%
filter(dep_delay <= 0)
)
# Get some feedback on your answer above
test_that("Solution is incorrect.", {
expect_equal(digest(sum(delayed_on_route$dep_time)), "285e926edafe3e5f2d95e34124bd6f39")
})
print("Success")
(flights_early <- flights %>%
filter(dep_time %>%
between(200,600))
)
# Get some feedback on your answer above
test_that("Solution is incorrect.", {
expect_equal(digest(sum(flights_early$dep_time)), "32fcf7581e7f672b2f6a443917963a12")
})
print("Success")
#TODO
# replace NULL with your code
#Save in the following variable the most delayed flights
(most_delayed <- flights %>%
arrange(desc(dep_delay))
)
#Save in the following variable the least non-negatively delayed flights
(least_delayed <- flights %>%
filter(dep_delay >= 0) %>%
arrange(dep_delay)
)
# Get some feedback on your answer above
test_that("It seems your most_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(most_delayed)), "c2431a8b3399c7757a777b93cb2a24ac")
})
test_that("Solution your least_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(least_delayed)), "d1d819e9107009c814f5218caa34cdc3")
})
print("Success")
#TODO
# replace NULL with your code
#Save in the following variable the flights that travelled the longest (in terms of air time)
(longest_duration <- flights %>%
arrange(desc(air_time))
)
#Save in the following variable the flights that travelled the shortest (in terms of air time)
(shortest_duration <- flights %>%
arrange(air_time)
)
(flights %>% select(dep_time,
dep_delay,
arr_time,
arr_delay)
)
flights %>% select(sched_dep_time,
dep_time) %>%
mutate(new_sched_dep_time = (((sched_dep_time %/% 100)*60) + (sched_dep_time %% 100))) %>%
mutate(new_dep_time = (((dep_time %/% 100)*60) + (dep_time %% 100)))
(flights_df <- flights %>% mutate(avg_speed = (distance * 1.6093)/(air_time/60)))
# Get some feedback on your answer above
test_that("Double check your solution, it might be incorrect.", {
expect_equal(digest(as.data.frame(flights_df)), "57559957e8985836e85af32f54bf5bcc")
})
print("Success")
#TODO
#TODO
# save the sample correlation in the following variable
cor_canc_delay <- NULL
# TODO
# save the sample correlation in the following variable
cor_canc_delay <- NULL
#TODO
#TODO
# Store the autocorrelation on January 1st in the variable below
autocor_delay_jan <- NULL
# Store the autocorrelation on July 28th in the variable below
autocor_delay_july <- NULL
#TODO
#TODO
#TODO
# replace NULL with your code
delay_autocor <- NULL
flights %>%
arrange(origin, month, day, dep_time) %>%
group_by(origin, month, day) %>%
summarise(r = cor(dep_delay, lag(dep_delay), use = "complete.obs")) %>%
ggplot() + geom_boxplot(aes(x = origin, y = r))
#TODO
# store the suspiciously fast flights in the variable below
fast_flights <- NULL
# Get some feedback on your answer above
test_that("Double check your solution, it might be incorrect.", {
expect_equal(digest(as.data.frame(flights_df)), "57559957e8985836e85af32f54bf5bcc")
})
print("Success")
flights %>% select(air_time) %>%
mutate(arr_time-dep_time = arr_time - dep_time)
flights %>% select(air_time) %>%
mutate(cal_air_time = arr_time - dep_time)
flights %>% select(arr_time) %>%
mutate(cal_air_time = arr_time - dep_time)
flights %>% select(arr_time) %>%
mutate(cal_air_time = a(rr_time - dep_time))
flights %>% select(arr_time) %>%
mutate(cal_air_time = (arr_time - dep_time))
flights %>% select(arr_time) %>% mutate(cal_air_time = (arr_time- dep_time))
flights %>% select(arr_time) #%>% mutate(cal_air_time = (arr_time- dep_time))
flights %>%
select(arr_time,
dep_time) %>%
mutate(cal_air_time = (arr_time- dep_time))
flights %>%
select(air_time,
arr_time,
dep_time) %>%
mutate(cal_air_time = (arr_time- dep_time))
library(tidyverse)
library(infer)
set.seed(1234)
virtual box <- tibble(timbit_id = seq(from = 1, to = 10000, by = 1),
color = factor(rbinom(10000,1,0.63),
levels = c(1,0),
labels = c('choclate', 'old fashioned'))
)
virtual_box <- tibble(timbit_id = seq(from = 1, to = 10000, by = 1),
color = factor(rbinom(10000,1,0.63),
levels = c(1,0),
labels = c('choclate', 'old fashioned'))
)
install.packages('infer')
library(infer)
one_sample <- rep_sample_n(virtual_box, size = 40)
total_chocolate_one_sample <- one_sample %>% summarize(chocolate = sum(color == 'chocolate'))
(prop_total_chocolate <- total_chocolate_one_sample %>% mutate(prop_choc = chocolate/40))
one_sample <- rep_sample_n(virtual_box, size = 40)
total_chocolate_one_sample <- one_sample %>% summarize(chocolate = sum(color == 'chocolate'))
(prop_total_chocolate <- total_chocolate_one_sample %>% mutate(prop_choc = chocolate/40))
View(total_chocolate_one_sample)
set.seed(1234)
virtual_box <- tibble(timbit_id = seq(from = 1, to = 10000, by = 1),
color = factor(rbinom(10000,1,0.63),
levels = c(1,0),
labels = c('chocolate', 'old fashioned'))
)
set.seed(NULL)
one_sample <- rep_sample_n(virtual_box, size = 40)
total_chocolate_one_sample <- one_sample %>% summarize(chocolate = sum(color == 'chocolate'))
(prop_total_chocolate <- total_chocolate_one_sample %>% mutate(prop_choc = chocolate/40))
seventy_samples <- rep_sample_n(virtual_box, size = 40, reps = 70)
seventy_samples <- rep_sample_n(virtual_box, size = 40, reps = 70)
seventy_samples_grouped <- seventy_samples %>% group_by(replicate) %>%
summarize(chocolate = sum(color = 'chocolate')) %>%
mutate(prop_chocolate = chocolate / 40)
seventy_samples <- rep_sample_n(virtual_box, size = 40, reps = 70)
seventy_samples_grouped <- seventy_samples %>% group_by(replicate) %>%
summarize(chocolate = sum(color = 'chocolate')) %>%
mutate(prop_chocolate = chocolate / 40)
seventy_samples_grouped <- seventy_samples %>% group_by(replicate) %>%
summarize(chocolate = sum(color == 'chocolate')) %>%
mutate(prop_chocolate = chocolate / 40)
(seventy_samples_grouped <- seventy_samples %>% group_by(replicate) %>%
summarize(chocolate = sum(color == 'chocolate')) %>%
mutate(prop_chocolate = chocolate / 40)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
library(magrittr)
library(digest)
library(testthat)
(flights_uad <- flights %>%
filter(carrier %in% c('UA','AA','DL'))
)
is.tibble(flights_uad)
# Get some feedback on your answer above
test_that("You should only have 3 unique values in the carrier column", {
expect_equal(length(unique(flights_uad$carrier)), 3)
})
test_that("Solution is incorrect", {
expect_equal(digest((sum(flights_uad$year))), "986b5dcdb3414c74ee6cd0f851d1e9f1")
})
print("success!")
(delayed_on_route <- flights %>%
filter(arr_delay > 120) %>%
filter(dep_delay <= 0)
)
# Get some feedback on your answer above
test_that("Solution is incorrect.", {
expect_equal(digest(sum(delayed_on_route$dep_time)), "285e926edafe3e5f2d95e34124bd6f39")
})
print("Success")
(flights_early <- flights %>%
filter(dep_time %>%
between(200,600))
)
# Get some feedback on your answer above
test_that("Solution is incorrect.", {
expect_equal(digest(sum(flights_early$dep_time)), "32fcf7581e7f672b2f6a443917963a12")
})
print("Success")
#TODO
# replace NULL with your code
#Save in the following variable the most delayed flights
(most_delayed <- flights %>%
arrange(desc(dep_delay))
)
#Save in the following variable the least non-negatively delayed flights
(least_delayed <- flights %>%
filter(dep_delay >= 0) %>%
arrange(dep_delay)
)
# Get some feedback on your answer above
test_that("It seems your most_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(most_delayed)), "c2431a8b3399c7757a777b93cb2a24ac")
})
test_that("Solution your least_delayed variable is incorrect.", {
expect_equal(digest(as.data.frame(least_delayed)), "d1d819e9107009c814f5218caa34cdc3")
})
print("Success")
#TODO
# replace NULL with your code
#Save in the following variable the flights that travelled the longest (in terms of air time)
(longest_duration <- flights %>%
arrange(desc(air_time))
)
#Save in the following variable the flights that travelled the shortest (in terms of air time)
(shortest_duration <- flights %>%
arrange(air_time)
)
(flights %>% select(dep_time,
dep_delay,
arr_time,
arr_delay)
)
flights %>% select(sched_dep_time,
dep_time) %>%
mutate(new_sched_dep_time = (((sched_dep_time %/% 100)*60) + (sched_dep_time %% 100))) %>%
mutate(new_dep_time = (((dep_time %/% 100)*60) + (dep_time %% 100)))
(flights_df <- flights %>% mutate(avg_speed = (distance * 1.6093)/(air_time/60)))
# Get some feedback on your answer above
test_that("Double check your solution, it might be incorrect.", {
expect_equal(digest(as.data.frame(flights_df)), "57559957e8985836e85af32f54bf5bcc")
})
print("Success")
flights %>%
select(air_time,
arr_time,
dep_time) %>%
mutate(cal_air_time = (arr_time- dep_time))
(canc_delay_flights <- flights %>%
group_by(year, month, day) %>%
summarise(prop_canc = sum(is.na(dep_delay)/n()),avg_dep_delay = mean(dep_delay, na.rm = TRUE)))
cor_canc_delay <- cor(canc_delay_flights$prop_canc, canc_delay_flights$avg_dep_delay)
(avg_speed_dis_flights <- flights_df %>%
group_by(carrier) %>%
summarise(car_avg_speed = mean(avg_speed, na.rm = TRUE), car_avg_dis = mean(distance)) %>%
arrange(car_avg_speed)
)
cor_speed_dist <- cor(avg_speed_dis_flights$car_avg_speed, avg_speed_dis_flights$car_avg_dis)
(flights %>%
group_by(carrier, origin) %>%
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), num_flights = n()) %>%
arrange(carrier, desc(avg_dep_delay))
)
(delay_corr_flights_jan <- flights %>%
filter(origin == 'LGA', month == 1, day == 1, !is.na(dep_time)) %>%
arrange(dep_time) %>%
mutate(prev_delay_time = lag(dep_delay)) %>%
filter(!is.na(prev_delay_time)) %>%
select(year, month, day, dep_time, sched_dep_time, dep_delay, prev_delay_time, origin, everything())
)
(delay_corr_flights_july <- flights %>%
filter(origin == 'LGA', month == 7, day == 28, !is.na(dep_time)) %>%
arrange(dep_time) %>%
mutate(prev_delay_time = lag(dep_delay)) %>%
filter(!is.na(prev_delay_time)) %>%
select(year, month, day, dep_time, sched_dep_time, dep_delay, prev_delay_time, origin, everything())
)
# Store the autocorrelation on January 1st in the variable below
autocor_delay_jan <- cor(delay_corr_flights_jan$dep_delay, delay_corr_flights_jan$prev_delay_time)
# Store the autocorrelation on July 28th in the variable below
autocor_delay_july <- cor(delay_corr_flights_july$dep_delay, delay_corr_flights_july$prev_delay_time)
# Get some feedback on your answer above
test_that("Your correlation coefficient for January 1st is incorrect", {
expect_equal(digest(round(autocor_delay_jan, 6)), "e9258c7227e4394c83656ccc9ab854ef")
})
test_that("Your correlation coefficient for July 28th is incorrect", {
expect_equal(digest(round(autocor_delay_july, 6)), "9d50f72b8d8cff50ddf75f5894d66ccc")
})
print("Success")
(delay_corr_flights_jan_2 <- flights %>%
filter(origin == 'LGA', month == 1, day == 1, !is.na(dep_time)) %>%
arrange(dep_time) %>%
mutate(prev_delay_time = lag(dep_delay, n = 2)) %>%
filter(!is.na(prev_delay_time)) %>%
select(year, month, day, dep_time, sched_dep_time, dep_delay, prev_delay_time, origin, everything())
)
(delay_corr_flights_july_2 <- flights %>%
filter(origin == 'LGA', month == 7, day == 28, !is.na(dep_time)) %>%
arrange(dep_time) %>%
mutate(prev_delay_time = lag(dep_delay, n = 2)) %>%
filter(!is.na(prev_delay_time)) %>%
select(year, month, day, dep_time, sched_dep_time, dep_delay, prev_delay_time, origin, everything())
)
# Store the autocorrelation on January 1st in the variable below
(autocor_delay_jan_2 <- cor(delay_corr_flights_jan_2$dep_delay, delay_corr_flights_jan_2$prev_delay_time))
# Store the autocorrelation on July 28th in the variable below
(autocor_delay_july_2 <- cor(delay_corr_flights_july_2$dep_delay, delay_corr_flights_july_2$prev_delay_time))
acf(delay_corr_flights_jan$dep_delay, na.action = na.pass)
acf(delay_corr_flights_july$dep_delay, na.action = na.pass)
(delay_autocor <- flights %>%
arrange(dep_time) %>%
group_by(origin, month, day) %>%
filter(!is.na(dep_delay)) %>%
mutate(dep_delay_lagged = lag(dep_delay)) %>%
filter(!is.na(dep_delay_lagged)) %>%
summarise(r = cor(dep_delay, dep_delay_lagged))  %>%
arrange(desc(r))
# ungroup %>%
# filter(r == max(r))
)
# delay_autocor <- cor(all_flights_lagged$dep_delay, all_flights_lagged$dep_delay_lagged)
# Get some feedback on your answer above
test_that("The solution is incorrect.", {
expect_equal(digest(as.data.frame(delay_autocor)), "28a59a3176d6321c92df9e586955e200")
})
print("Success")
flights %>%
arrange(origin, month, day, dep_time) %>%
group_by(origin, month, day) %>%
summarise(r = cor(dep_delay, lag(dep_delay), use = "complete.obs")) %>%
ggplot() + geom_boxplot(aes(x = origin, y = r))
# store the suspiciously fast flights in the variable below
(fast_flights <- flights %>%
mutate(air_speed = (distance*1.6093)/(air_time/60)) %>%
group_by(origin, dest) %>%
mutate(avg_speed = mean(air_speed, na.rm = TRUE)) %>%
mutate(std_dev = sd(air_speed, na.rm = TRUE)) %>%
filter((air_speed - avg_speed) > 3*std_dev)
#summarise(avg_flight_speed = mean(avg_speed, na.rm = TRUE))
)
# Get some feedback on your answer above
test_that("The solution is incorrect.", {
expect_equal(digest(fast_flights %>% arrange(flight) %$% flight), "bb171022065c4c5581a664bb45675670")
})
print("Success")
(canc_delay_flights <- flights %>%
group_by(year, month, day) %>%
summarise(prop_canc = sum(is.na(dep_delay)/n()),avg_dep_delay = mean(dep_delay, na.rm = TRUE)))
cor_canc_delay <- cor(canc_delay_flights$prop_canc, canc_delay_flights$avg_dep_delay)
(flights %>%
group_by(carrier, origin) %>%
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), num_flights = n()) %>%
arrange(desc(avg_dep_delay), carrier)
)
(flights %>%
group_by(carrier, origin) %>%
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), num_flights = n()) %>%
arrange(carrier, desc(avg_dep_delay))
)
(flights %>%
group_by(carrier, origin) %>%
summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE), num_flights = n()) %>%
arrange(origin, desc(avg_dep_delay))
)
(delay_autocor <- flights %>%
arrange(dep_time) %>%
group_by(origin, month, day) %>%
filter(!is.na(dep_delay)) %>%
mutate(dep_delay_lagged = lag(dep_delay)) %>%
filter(!is.na(dep_delay_lagged)) %>%
summarise(r = cor(dep_delay, dep_delay_lagged))  %>%
arrange(desc(r))
)
# Get some feedback on your answer above
test_that("The solution is incorrect.", {
expect_equal(digest(as.data.frame(delay_autocor)), "28a59a3176d6321c92df9e586955e200")
})
print("Success")
install.packages('gridExtra')
?rexp
?rnorm
?scales
?library::scale
install.packages(c("cli", "countrycode", "devtools", "digest", "dplyr", "evaluate", "fansi", "ggplot2", "htmlwidgets", "IRdisplay", "mime", "ps", "R6", "Rcpp", "reshape", "rlang", "rstudioapi", "shinydashboard", "stringi", "testthat", "tidyr", "tidyselect", "tinytex", "tweenr", "units", "xfun", "xtable"))
head(iris)
library(tidyselect)
library(knitr)
sessionInfo()
volcano
library(car)
install.packages(car)
install.packages("car")
shiny::runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
shiny::runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
shiny::runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
shiny::runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
shiny::runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
runApp('School/Master of Data Science/DSCI_532_Arzan_Brenden/City-Crime-Comparison')
i <- c(1:4)
j <- c(5:8)
k <- c(9:12)
tmp <- array(c(i,j,k))
tmp
tmp <- array(i,j,k)
tmp
tmp <- array(i,j,k)
tmp1 <- array(i,j,k)
tmp <- array(i,j,k, dimnames = c("n","w","h"))
tmp <- array(i,j,k, dimnames = list("n","w","h"))
tmp <- array(i,j,k, dimnames = list("n","w","h"))
tmp <- array(c(i,j,k), dim = 4, dimnames = list("n","w","h"))
tmp <- array(c(i,j,k), dim = c(4,3), dimnames = list("n","w","h"))
tmp <- array(c(i,j,k), dim = c(2,4,3), dimnames = list("n","w","h"))
tmp <- array(0, dim = c(2,4,3), dimnames = list("n","w","h"))
tmp <- array(0, dim = c(2,4,3))
tmp
dim(tmp)
length(dim(tmp))
tmp <- array(0, dim = c(2,4,7))
length(dim(tmp))
tmp <- array(0, dim = c(2,4,7,6))
length(dim(tmp))
dim(temp)[length(dim(temp))]
dim(tmp)[length(dim(tmp))]
tmp
tmp <- array(0, dim = c(2,4,7))
tmp
dim(tmp)[1:length(dim(tmp))-1]
install.packages("covr")
library(rjson)
fromJSON("https://statsapi.web.nhl.com/api/v1/teams")
fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")$teams
tmp <- as.tibble(fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")$teams)
library(tidyverse)
library(rjson)
tmp <- as.tibble(fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")$teams)
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp$teams
as.tibble(tmp$teams)
tmp <- tmp$teams)
tmp <- tmp$teams
tmp
unlist(tmp)
tmp <- unlist(tmp)
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp <- tmp$teams
tmp <- as.tibble(unlist(tmp))
View(tmp)
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp <- tmp$teams
tmp[[1]]
as.tibble(tmp[[1]])
tmp <- fromJSON(file = "https://statsapi.web.nhl.com/api/v1/teams")
tmp <- tmp$teams
setwd("~/School/Master of Data Science/R2Py2")
